using LinearAlgebra
using LinearAlgebra.BLAS
using BenchmarkTools

# Generate random data
function random_matrix(m, n)
    return rand(-5.0:0.1:5.0, m, n)
end


# BLAS LEVEL-3: Matrix-Matrix Operations
function matrix_multiply(A, B)
    m, k = size(A)
    k2, n = size(B)
    C = zeros(m, n)
    
    for i in 1:m
        for j in 1:n
            for l in 1:k
                C[i, j] += A[i, l] * B[l, j]
            end
        end
    end
    return C
end

# Tiled Matrix Multiplication
function tiled_multiply(A, B, tile_size)
    m, n, k = size(A, 1), size(B, 2), size(A, 2)
    C = zeros(m, n)
    
    @views Threads.@threads for i in 1:tile_size:m
        for j in 1:tile_size:n
            for l in 1:tile_size:k
                # Define tile boundaries
                i_end = min(i + tile_size - 1, m)
                j_end = min(j + tile_size - 1, n)
                l_end = min(l + tile_size - 1, k)
                
                # Multiply tiles
                BLAS.gemm!('N', 'N', 1.0, A[i:i_end, l:l_end], B[l:l_end, j:j_end], 1.0, C[i:i_end, j:j_end])
            end
        end
    end
    return C
end


# MULTI-THREADED TILE-MATRIX
# SET NUMBER OF THREADS
LinearAlgebra.BLAS.set_num_threads(8)

# CREATE RANDOM DATA
n = 4096
A = randn(n, n)
B = randn(n, n)
tile_size = 2048

# RESULT TIMES
result = @benchmark tiled_multiply($A, $B, tile_size) samples=10 evals=1 seconds=Inf
println(result.times ./ 1e9)
mean_time = (time(mean(result)) / 1e9)
println(mean_time)

# GFLOPS Calculation
gflops = (2 * n^3) / (mean_time * 1e9)
println("GFLOPS: $(round(gflops, digits=2))")