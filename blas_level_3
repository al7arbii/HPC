using LinearAlgebra
using LinearAlgebra.BLAS
using BenchmarkTools

# Generate random data
function random_matrix(m, n)
    return rand(-5.0:0.1:5.0, m, n)
end


# BLAS LEVEL-3: Matrix-Matrix Operations
function gemm(A, B)
    m, k = size(A)
    k, n = size(B)
    C = zeros(m, n)
    
    for i in 1:m
        for j in 1:n
            for l in 1:k
                C[i, j] += A[i, l] * B[l, j]
            end
        end
    end
    
    return C
end

# Tiled Matrix Multiplication
function tiled_multiply(A, B, tile_size)
    m, n, k = size(A, 1), size(B, 2), size(A, 2)
    C = zeros(m, n)
    
    for i in 1:tile_size:m
        for j in 1:tile_size:n
            for l in 1:tile_size:k
                # Define tile boundaries
                i_end = min(i + tile_size - 1, m)
                j_end = min(j + tile_size - 1, n)
                l_end = min(l + tile_size - 1, k)
                
                # Multiply tiles
                C[i:i_end, j:j_end] += A[i:i_end, l:l_end] * B[l:l_end, j:j_end]
            end
        end
    end
    return C
end


# SINGLE-THREADED TILE-MATRIX
LinearAlgebra.BLAS.set_num_threads(1)
A = randn(1024, 2048)
B = randn(2048, 1024)
tile_size = 128 
C = @benchmark tiled_multiply(A, B, tile_size)
println(C)